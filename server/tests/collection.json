{
	"info": {
		"_postman_id": "68decf0c-8e72-454a-9c1d-8a843f36c1bb",
		"name": "Integration Test Admin",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38376698"
	},
	"item": [
		{
			"name": "Sport",
			"item": [
				{
					"name": "AdminToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// Si la requête est réussie, stocke le token",
									"if (pm.response.code === 200 || pm.response.code === 201) {",
									"    // Parse la réponse pour extraire le token",
									"    const responseJson = pm.response.json();",
									"    const token = responseJson.token;",
									"",
									"    // Stocke le token",
									"    pm.environment.set(\"admin_token\", token);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"a@a.a\",\n  \"password\": \"a\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Sport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Enregistrer l'id du sport dans une variable d'environnement",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"sportId\", responseData.id);",
									"",
									"    console.log(\"Sport ID enregistré :\", responseData.id);",
									"} else {",
									"    console.error(\"Sport ID non trouvé dans la réponse\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test_WaterPollo\",\n  \"rule\": \"Bring your swimsuit\",\n  \"scoreSystem\": \"ASC\",\n  \"color\": \"#FFFFFF\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sports/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sports",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Error - Duplicate Sport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error server 500 (duplication)\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test_WaterPollo\",\n  \"rule\": \"Bring your swimsuit\",\n  \"scoreSystem\": \"DESC\",\n  \"color\": \"#FFFFFF\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sports/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sports",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Sport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"rule\": \"Don't drown !\",\n  \"scoreSystem\": \"DESC\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sports/{{sportId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sports",
								"{{sportId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSportById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sports/{{sportId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sports",
								"{{sportId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSports",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sports",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sports"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteSport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.environment.unset(\"sportId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sports/{{sportId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sports",
								"{{sportId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Sport 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Enregistrer l'id du sport dans une variable d'environnement",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"sportId_1\", responseData.id);",
									"",
									"    console.log(\"Sport ID enregistré :\", responseData.id);",
									"} else {",
									"    console.error(\"Sport ID non trouvé dans la réponse\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test_WaterPollo\",\n  \"rule\": \"Bring your swimsuit\",\n  \"scoreSystem\": \"ASC\",\n  \"color\": \"#964B00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sports/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sports",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Sport 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Enregistrer l'id du sport dans une variable d'environnement",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"sportId_2\", responseData.id);",
									"",
									"    console.log(\"Sport ID enregistré :\", responseData.id);",
									"} else {",
									"    console.error(\"Sport ID non trouvé dans la réponse\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test_Football\",\n  \"rule\": \"Don't play with hand\",\n  \"scoreSystem\": \"ASC\",\n  \"color\": \"#A020F0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sports/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sports",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Sport 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Enregistrer l'id du sport dans une variable d'environnement",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"sportId_3\", responseData.id);",
									"",
									"    console.log(\"Sport ID enregistré :\", responseData.id);",
									"} else {",
									"    console.error(\"Sport ID non trouvé dans la réponse\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test_Basketball\",\n  \"rule\": \"Don't play with foot\",\n  \"scoreSystem\": \"ASC\",\n  \"color\": \"#FFA500\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sports/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sports",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Error Create - no rule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error server 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test_Volleyball\",\n  \"rule\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sports/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sports",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tourney",
			"item": [
				{
					"name": "Create Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Enregistrer l'id du tournoi dans une variable d'environnement",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"tourneyId\", responseData.id);",
									"",
									"    console.log(\"Tourney ID enregistré :\", responseData.id);",
									"} else {",
									"    console.error(\"Tourney ID non trouvé dans la réponse\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test_Tournoi Test\",\n  \"location\": \"Lausanne - Beaulieu\",\n  \"dateTourney\": \"2024-11-15\",\n  \"emergencyDetails\": \"Contact : Professeur X, Tel: +12 34 567\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Error - Duplicate Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error Server POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test_Tournoi Test\",\n  \"location\": \"Lausanne - Beaulieu\",\n  \"dateTourney\": \"2024-11-15\",\n  \"emergencyDetails\": \"Contact : Professeur X, Tel: +12 34 567\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Error - Location Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error Server POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test_Tournoi Test 2\",\n  \"location\": \"\",\n  \"dateTourney\": \"2024-11-15\",\n  \"emergencyDetails\": \"Contact : Professeur X, Tel: +12 34 567\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Error - Date Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error Server POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test_Tournoi Test 2\",\n  \"location\": \"Paradis\",\n  \"dateTourney\": \"\",\n  \"emergencyDetails\": \"Contact : Professeur X, Tel: +12 34 567\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"location\": \"Fribourg - Saint-Michel\",\n  \"status\": \"active\",\n  \"fieldAssignmentStatus\": \"draft\",\n  \"sportAssignmentStatus\": \"draft\",\n  \"registrationStatus\": \"draft\",\n  \"poolStatus\": \"draft\",\n  \"planningStatus\": \"draft\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTourneyById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTourneys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Statuses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/statuses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"statuses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});",
									"",
									"pm.environment.unset(\"tourneyId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Enregistrer l'id du tournoi dans une variable d'environnement",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"tourneyId\", responseData.id);",
									"",
									"    console.log(\"Tourney ID enregistré :\", responseData.id);",
									"} else {",
									"    console.error(\"Tourney ID non trouvé dans la réponse\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test_Tournoi Test\",\n  \"location\": \"Lausanne - Beaulieu\",\n  \"dateTourney\": \"2024-11-15\",\n  \"emergencyDetails\": \"Contact : Professeur X, Tel: +12 34 567\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Field",
			"item": [
				{
					"name": "Create Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Enregistrer l'id du terrain dans une variable d'environnement",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"fieldId\", responseData.id);",
									"",
									"    console.log(\"Field ID enregistré :\", responseData.id);",
									"} else {",
									"    console.error(\"Field ID non trouvé dans la réponse\");",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Field 1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/fields",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"fields"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Field A\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/fields/{{fieldId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"fields",
								"{{fieldId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetFieldById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/fields/{{fieldId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"fields",
								"{{fieldId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.environment.unset(\"fieldId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/fields/{{fieldId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"fields",
								"{{fieldId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Multiple fields (3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Enregistrer l'id du terrain dans une variable d'environnement",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.fields) {",
									"    pm.environment.set(\"fieldId_1\", responseData.fields[0].id);",
									"    pm.environment.set(\"fieldId_2\", responseData.fields[1].id);",
									"    pm.environment.set(\"fieldId_3\", responseData.fields[2].id);",
									"    console.log(\"Fields ID enregistrés :\", responseData.message);",
									"} else {",
									"    console.error(responseData.message);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"numberOfFields\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/fields/multiple",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"fields",
								"multiple"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Field Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.environment.unset(\"fieldId_1\");",
									"pm.environment.unset(\"fieldId_2\");",
									"pm.environment.unset(\"fieldId_3\");",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/fields/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"fields",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Multiple fields (3)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Enregistrer l'id du terrain dans une variable d'environnement",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.fields) {",
									"    pm.environment.set(\"fieldId_1\", responseData.fields[0].id);",
									"    pm.environment.set(\"fieldId_2\", responseData.fields[1].id);",
									"    pm.environment.set(\"fieldId_3\", responseData.fields[2].id);",
									"    console.log(\"Fields ID enregistrés :\", responseData.message);",
									"} else {",
									"    console.error(responseData.message);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"numberOfFields\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/fields/multiple",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"fields",
								"multiple"
							]
						}
					},
					"response": []
				},
				{
					"name": "getFieldsByTourneyId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/fields/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"fields",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SportsFields",
			"item": [
				{
					"name": "Create Sport_1 to Field_1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sportId\":{{sportId_1}},\n    \"fieldId\": {{fieldId_1}},\n    \"startTime\": \"08:00\",\n    \"endTime\":  \"12:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/sports-fields/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"sports-fields",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Sport_2 to Field_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sportId\":{{sportId_2}} ,\n    \"fieldId\": {{fieldId_2}},\n    \"startTime\": \"08:00\",\n    \"endTime\":  \"12:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/sports-fields/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"sports-fields",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Sport_3 to Field_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sportId\":{{sportId_3}} ,\n    \"fieldId\": {{fieldId_3}},\n    \"startTime\": \"13:00\",\n    \"endTime\":  \"19:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/sports-fields/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"sports-fields",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Sport_1 to Field_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"// Enregistrer l'id du sportsFields dans une variable d'environnement",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"sportsFieldsId\", responseData.id);",
									"",
									"    console.log(\"SportsFields ID enregistré :\", responseData.id);",
									"} else {",
									"    console.error(\"SportsFields ID non trouvé dans la réponse\");",
									"}",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sportId\":{{sportId_1}} ,\n    \"fieldId\": {{fieldId_3}},\n    \"startTime\": \"06:00\",\n    \"endTime\":  \"10:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/sports-fields/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"sports-fields",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Update SportsFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fieldId\": {{fieldId_1}},\n    \"startTime\": \"22:00\",\n    \"endTime\":  \"24:00\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/sports-fields/{{sportsFieldsId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"sports-fields",
								"{{sportsFieldsId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSportsByField",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/sports-fields/fields/{{fieldId_1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"sports-fields",
								"fields",
								"{{fieldId_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete SportsFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.environment.unset(\"sportsFieldsId\")",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/sports-fields/{{sportsFieldsId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"sports-fields",
								"{{sportsFieldsId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSportsFieldsByTourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/sports-fields/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"sports-fields",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get Own Data (Admin_token)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Response contains user data\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property(\"id\");",
									"    pm.environment.set(\"userId\", responseData.id);",
									"    console.log(\"User ID enregistré :\", responseData.id);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"userId\", responseData.id);",
									"    console.log(\"User ID enregistré :\", responseData.id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Doe\",\n    \"email\": \"johndoe@example.com\",\n    \"password\": \"securePassword\",\n    \"phone\": \"1234567890\",\n    \"roleId\": 2\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User To Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"User added to tourney successfully\", function () {",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Utilisateur ajouté au tournoi avec succès.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Doe\",\n    \"email\": \"johndoe@example.com\",\n    \"password\": \"securePassword\",\n    \"phone\": \"1234567890\",\n    \"roleId\": 2\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId}}/tourneys/{{tourneyId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"tourneys",
								"{{tourneyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Users data retrieved successfully\", function () {",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Response contains user data\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property(\"id\", pm.environment.get(\"userId\"));",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Response contains updated user data\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property(\"name\", \"John Updated\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Updated\",\n    \"email\": \"johnupdated@example.com\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Tourneys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"Tourneys data retrieved successfully\", function () {",
									"    pm.expect(pm.response.json()).to.be.an(\"array\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId}}/tourneys",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"tourneys"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove User From Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									"pm.test(\"User removed from tourney\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property(\"message\", \"Utilisateur retiré du tournoi avec succès.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId}}/tourneys/{{tourneyId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}",
								"tourneys",
								"{{tourneyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});",
									"",
									"pm.environment.unset(\"userId\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"userId_1\", responseData.id);",
									"    console.log(\"User ID enregistré :\", responseData.id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Utilisateur Un\",\n    \"email\": \"user1@test.com\",\n    \"password\": \"password\",\n    \"phone\": \"1234567890\",\n    \"roleId\": 2\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"userId_2\", responseData.id);",
									"    console.log(\"User ID enregistré :\", responseData.id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Utilisateur Deux\",\n    \"email\": \"user2@test.com\",\n    \"password\": \"password\",\n    \"phone\": \"1234567890\",\n    \"roleId\": 2\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"userId_3\", responseData.id);",
									"    console.log(\"User ID enregistré :\", responseData.id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Utilisateur Trois\",\n    \"email\": \"user3@test.com\",\n    \"password\": \"password\",\n    \"phone\": \"1234567890\",\n    \"roleId\": 2\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"userId_4\", responseData.id);",
									"    console.log(\"User ID enregistré :\", responseData.id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Utilisateur Quatre\",\n    \"email\": \"user4@test.com\",\n    \"password\": \"password\",\n    \"phone\": \"1234567890\",\n    \"roleId\": 2\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"userId_5\", responseData.id);",
									"    console.log(\"User ID enregistré :\", responseData.id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Utilisateur Cinq\",\n    \"email\": \"user5@test.com\",\n    \"password\": \"password\",\n    \"phone\": \"1234567890\",\n    \"roleId\": 2\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User1 To Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"User added to tourney successfully\", function () {",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Utilisateur ajouté au tournoi avec succès.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId_1}}/tourneys/{{tourneyId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId_1}}",
								"tourneys",
								"{{tourneyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User2 To Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"User added to tourney successfully\", function () {",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Utilisateur ajouté au tournoi avec succès.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId_2}}/tourneys/{{tourneyId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId_2}}",
								"tourneys",
								"{{tourneyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User3 To Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"User added to tourney successfully\", function () {",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Utilisateur ajouté au tournoi avec succès.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId_3}}/tourneys/{{tourneyId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId_3}}",
								"tourneys",
								"{{tourneyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User4 To Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"User added to tourney successfully\", function () {",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Utilisateur ajouté au tournoi avec succès.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId_4}}/tourneys/{{tourneyId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId_4}}",
								"tourneys",
								"{{tourneyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User5 To Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"User added to tourney successfully\", function () {",
									"    pm.expect(pm.response.json()).to.have.property(\"message\", \"Utilisateur ajouté au tournoi avec succès.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId_5}}/tourneys/{{tourneyId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId_5}}",
								"tourneys",
								"{{tourneyId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Team",
			"item": [
				{
					"name": "Create Team Setup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"maxTeamNumber\": 2,\n    \"playerPerTeam\": 1,\n    \"minPlayerPerTeam\": 1,\n    \"minTeamPerPool\": 1,\n    \"maxTeamPerPool\": 2\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/team-setup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"team-setup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Error - duplicate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Error POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([500]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"maxTeamNumber\": 2,\n    \"playerPerTeam\": 1,\n    \"minPlayerPerTeam\": 1,\n    \"minTeamPerPool\": 1,\n    \"maxTeamPerPool\": 2\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/team-setup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"team-setup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update TeamSetup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{    \n    \"maxTeamNumber\": 2,\n    \"playerPerTeam\": 2,\n    \"minPlayerPerTeam\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/team-setup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"team-setup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Team Setup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/team-setup",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"team-setup"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"teamId_1\", responseData.id);",
									"    console.log(\"Team ID enregistré :\", responseData.id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"teamName\": \"Team A\",\n    \"type\": \"player\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/teams",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign User1 to Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User assigned to team successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": {{userId_1}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/teams/{{teamId_1}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"teams",
								"{{teamId_1}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign User2 to Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User assigned to team successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": {{userId_2}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/teams/{{teamId_1}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"teams",
								"{{teamId_1}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove User2 From Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User removed from team successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/teams/{{teamId_1}}/users/{{userId_2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"teams",
								"{{teamId_1}}",
								"users",
								"{{userId_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Team updated successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"teamName\": \"Team A Updated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/teams/{{teamId_1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"teams",
								"{{teamId_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Team Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Team retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/teams/{{teamId_1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"teams",
								"{{teamId_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Team deleted successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									"pm.environment.unset(\"teamId_1\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/teams/{{teamId_1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"teams",
								"{{teamId_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check user1 still in tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User still associated with tourney\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId_1}}/tourneys",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId_1}}",
								"tourneys"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Teams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Teams generated successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"teamName\": \"Team A\",\n    \"type\": \"player\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/teams/generate-teams",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"teams",
								"generate-teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Teams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Teams reset successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/teams/reset",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"teams",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "ReGenerate Teams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Teams generated successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"// Enregistrer les id teams dans des variables d'environnemnt",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.teams) {",
									"    pm.environment.set(\"teamId_1\", responseData.teams[0].id);",
									"    pm.environment.set(\"teamId_2\", responseData.teams[1].id);",
									"    pm.environment.set(\"teamId_3\", responseData.teams[2].id);",
									"    console.log(\"Team ID enregistrés :\", responseData.message);",
									"} else {",
									"    console.error(responseData.message);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/teams/generate-teams",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"teams",
								"generate-teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auto Fill Teams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"pm.test(\"Response contains success message\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.have.property(\"message\", \"Affectations enregistrées avec succès.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"assignments\": [\n        { \"userId\": {{userId_1}}, \"teamId\": {{teamId_1}} },\n        { \"userId\": {{userId_2}}, \"teamId\": {{teamId_2}} },\n        { \"userId\": {{userId_3}}, \"teamId\": {{teamId_2}} },\n        { \"userId\": {{userId_4}}, \"teamId\": {{teamId_3}} },\n        { \"userId\": {{userId_5}}, \"teamId\": {{teamId_3}} }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/teams/auto-fill",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"teams",
								"auto-fill"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auto Fill Teams Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All teams retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/teams",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"teams"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "InvitationToken",
			"item": [
				{
					"name": "Generate Invite Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token generated successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/invite-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"invite-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Invite Tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Retrieved all tokens successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"if (responseData) {",
									"    pm.environment.set(\"tokenId\", responseData.inviteTokens[0].id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/invite-token",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"invite-token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Invite Token by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/invite-token/{{tokenId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"invite-token",
								"{{tokenId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalidate Invite Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token invalidated successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/invite-token/{{tokenId}}/invalidate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"invite-token",
								"{{tokenId}}",
								"invalidate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Invite Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token validated successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/invite-token/{{tokenId}}/validate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"invite-token",
								"{{tokenId}}",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalidate All Invite Tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All tokens invalidated successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/invite-token/invalidate-all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"invite-token",
								"invalidate-all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate All Invite Tokens",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All tokens validated successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/invite-token/validate-all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"invite-token",
								"validate-all"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UsersTourneys",
			"item": [
				{
					"name": "Create Test User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"userTestId\", responseData.id);",
									"    console.log(\"User ID enregistré :\", responseData.id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test\",\n    \"email\": \"test@test.test\",\n    \"password\": \"password\",\n    \"phone\": \"1234567890\",\n    \"roleId\": 2\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User To Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User added to tourney successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": {{userTestId}}\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Team 2 to User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Team assigned to user successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"teamId\": {{teamId_2}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/users/{{userTestId}}/teams",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"users",
								"{{userTestId}}",
								"teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users by Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Users retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove User test From Team2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User removed from team successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/teams/{{teamId_2}}/users/{{userTestId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"teams",
								"{{teamId_2}}",
								"users",
								"{{userTestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Unassigned Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unassigned users retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/users/unassigned-users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"users",
								"unassigned-users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Info by Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User info retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/users/{{userTestId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"users",
								"{{userTestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove User from Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User removed from tourney successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/users/{{userTestId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"users",
								"{{userTestId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove User from Tourney Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User deleted successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});",
									"",
									"pm.environment.unset(\"userTestId\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userTestId}}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userTestId}}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Pool",
			"item": [
				{
					"name": "Update Tournament Pool Limits",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Tournament pool limits updated successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"defaultMaxTeamPerPool\": 2,\n  \"defaultMinTeamPerPool\": 2,\n  \"maxNumberOfPools\": 1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Pool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Pool created successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"poolId\", responseData.id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Pool A\",\n  \"maxTeamPerPool\": 2,\n  \"minTeamPerPool\": 1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/pools",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"pools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Pool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Pool updated successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Pool A - Updated\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/pools/{{poolId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"pools",
								"{{poolId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetPoolById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Pool retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/pools/{{poolId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"pools",
								"{{poolId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Team to Pool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Team assigned to pool successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"teamIds\": [{{teamId_2}}]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/pools/{{poolId}}/assign-teams",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"pools",
								"{{poolId}}",
								"assign-teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Team from Pool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Team removed from pool successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"teamIds\": [{{teamId_2}}]\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/pools/{{poolId}}/remove-teams",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"pools",
								"{{poolId}}",
								"remove-teams"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Pools with Strategy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Team removed from pool successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"strategy\": \"customRoundRobin\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/pools/generate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"pools",
								"generate"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllPools",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Pools retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/pools",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"pools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete All Pools",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"All pools deleted successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.environment.unset(\"poolId\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/pools/reset",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"pools",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Regenerate Pools auto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Pool generated successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// Enregistrer les id pools dans des variables d'environnemnt",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.pools) {",
									"    pm.environment.set(\"poolId_1\", responseData.pools[0].id);",
									"    console.log(\"Pool ID enregistrés :\", responseData.message);",
									"} else {",
									"    console.error(responseData.message);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"strategy\": \"customRoundRobin\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/pools/generate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"pools",
								"generate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ScheduleTourney",
			"item": [
				{
					"name": "Create Schedule Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Planning already exists\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"startTime\": \"08:00\",\n  \"endTime\": \"18:00\",\n  \"gameDuration\": 15,\n  \"poolDuration\": 115,\n  \"transitionPoolTime\": 5,\n  \"transitionGameTime\": 5,\n  \"introStart\": \"08:00\",\n  \"introEnd\": \"08:30\",\n  \"lunchStart\": \"12:00\",\n  \"lunchEnd\": \"13:00\",\n  \"outroStart\": \"17:30\",\n  \"outroEnd\": \"18:00\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/schedule",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"schedule"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Schedule Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Schedule retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"scheduleId\", responseData.id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/schedule",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"schedule"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Schedule Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Schedule updated successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"startTime\": \"07:00\",\n  \"endTime\": \"19:00\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/schedule/{{scheduleId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"schedule",
								"{{scheduleId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "PoolSchedule",
			"item": [
				{
					"name": "Assign Pool to Field 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Pool created successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"if (responseData) {",
									"    pm.environment.set(\"poolScheduleId\", responseData.poolSchedule.id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"fieldId\": {{fieldId_1}},\n  \"startTime\": \"08:00:00\",\n  \"endTime\": \"10:00:00\",\n  \"date\": \"2024-11-15\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/pools/schedule/{{poolId_1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"pools",
								"schedule",
								"{{poolId_1}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Game",
			"item": [
				{
					"name": "Create Game",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Game created successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"gameId\", responseData.id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"teamAId\": {{teamId_2}},\n  \"teamBId\": {{teamId_3}},\n  \"fieldId\": {{fieldId_1}},\n  \"poolScheduleId\": {{poolScheduleId}},\n  \"status\": \"scheduled\",\n  \"startTime\": \"2024-11-15 08:00:00\",\n  \"endTime\": \"2024-11-15 09:45:00\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/games",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Games by Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Games retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/games",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Game by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Game retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/games/{{gameId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"games",
								"{{gameId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Games by pool",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Games by pool retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/games/by-pool/{{poolId_1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"games",
								"by-pool",
								"{{poolId_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Games by poolSchedule",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Games by poolSchedule retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/games/by-pool-schedule/{{poolScheduleId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"games",
								"by-pool-schedule",
								"{{poolScheduleId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update match",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Game updated successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"startTime\": \"2024-11-15T11:00:00.000Z\",\n  \"endTime\": \"2024-11-15T12:00:00.000Z\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/games/{{gameId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"games",
								"{{gameId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate Games",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Game validation successful\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"if (pm.response.code === 400) {",
									"    pm.test(\"Conflicts detected\", function () {",
									"        pm.expect(responseData.conflicts).to.be.an('array');",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"startTime\": \"2024-11-20T11:00:00.000Z\",\n  \"endTime\": \"2024-11-20T12:00:00.000Z\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/games/validate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"games",
								"validate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Game",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Game deleted successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});",
									"",
									"pm.environment.unset(\"gameId\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/games/{{gameId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"games",
								"{{gameId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Game",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Game created successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"gameId\", responseData.id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"teamAId\": {{teamId_2}},\n  \"teamBId\": {{teamId_3}},\n  \"fieldId\": {{fieldId_1}},\n  \"poolScheduleId\": {{poolScheduleId}},\n  \"status\": \"scheduled\",\n  \"startTime\": \"2024-11-15 08:00:00\",\n  \"endTime\": \"2024-11-15 09:45:00\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/games",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"games"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "GameEvent",
			"item": [
				{
					"name": "Create Game Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Game event created successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);",
									"});",
									"",
									"const responseData = pm.response.json();",
									"if (responseData && responseData.id) {",
									"    pm.environment.set(\"gameEventId\", responseData.id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"teamId\": {{teamId_2}},\n  \"type\": \"goal\",\n  \"description\": \"Goal by player 1\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/games/{{gameId}}/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"games",
								"{{gameId}}",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Game Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Game events retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('array');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/games/{{gameId}}/events",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"games",
								"{{gameId}}",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Game Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Game event updated successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Updated goal by player 1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/games/{{gameId}}/events/{{gameEventId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"games",
								"{{gameId}}",
								"events",
								"{{gameEventId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Game Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Game event deleted successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/games/{{gameId}}/events/{{gameEventId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"games",
								"{{gameId}}",
								"events",
								"{{gameEventId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Teardown",
			"item": [
				{
					"name": "Get Tourney Teams Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Teams details retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/teams-details",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"teams-details"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tourney Pools Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Pools details retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/pools-details",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"pools-details"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tourney Statuses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Tourney statuses retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/statuses",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"statuses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tourney Regisrtation Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Registration status retrieved successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}/registration-status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}",
								"registration-status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Sport",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Sport exists (should be present)\", function () {",
									"    pm.expect(pm.response.code).to.not.equal(404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sports/{{sportId_1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sports",
								"{{sportId_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User 5 exists (should be present)\", function () {",
									"    pm.expect(pm.response.code).to.not.equal(404);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId_5}}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId_5}}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Tourney",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Tourney deleted successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Sport 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Sport deleted successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sports/{{sportId_1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sports",
								"{{sportId_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Sport 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Sport deleted successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sports/{{sportId_2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sports",
								"{{sportId_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Sport 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Sport deleted successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/sports/{{sportId_3}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"sports",
								"{{sportId_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User deleted successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId_1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId_1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User deleted successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId_2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId_2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User deleted successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId_3}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId_3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User deleted successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId_4}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId_4}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User deleted successfully\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId_5}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId_5}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Tourney Not Exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Tournament should not exist\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"/*",
									"pm.environment.unset(\"tourneyId\");",
									"// Unset variables",
									"pm.environment.unset(\"tourneyId\");",
									"pm.environment.unset(\"fieldId\");",
									"pm.environment.unset(\"fieldId_1\");",
									"pm.environment.unset(\"fieldId_2\");",
									"pm.environment.unset(\"fieldId_3\");",
									"pm.environment.unset(\"userId_1\");",
									"pm.environment.unset(\"userId_2\");",
									"pm.environment.unset(\"userId_3\");",
									"pm.environment.unset(\"userId_4\");",
									"pm.environment.unset(\"userId_5\");",
									"pm.environment.unset(\"teamId_1\");",
									"pm.environment.unset(\"teamId_2\");",
									"pm.environment.unset(\"teamId_3\");",
									"pm.environment.unset(\"tokenId\");",
									"pm.environment.unset(\"poolId\");",
									"pm.environment.unset(\"sportId_1\");",
									"pm.environment.unset(\"sportId_2\");",
									"pm.environment.unset(\"sportId_3\");",
									"pm.environment.unset(\"userIndex\");",
									"pm.environment.unset(\"userId\");",
									"pm.environment.unset(\"sportId_3\");",
									"pm.environment.unset(\"poolId_1\");",
									"pm.environment.unset(\"poolId_2\");",
									"pm.environment.unset(\"gameId\");",
									"pm.environment.unset(\"scheduleId\");",
									"pm.environment.unset(\"gameEventId\");",
									"",
									"*/",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/tourneys/{{tourneyId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tourneys",
								"{{tourneyId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}